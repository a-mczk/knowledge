まえがき
  アプリケーション開発は最後には経験と勘の世界になる
  詳細な技術をすべて知っていても、ソフトウェアの芸術性に対する感覚が養われていなければアプリケーション開発をマスターすることなどできない。


３章ソフトウェア開発を理解する
  プロジェクトが遅れた場合、要員を投入するだけで早くできると短絡的に考えてしまう。
  作業をより細かい手順に分割すればするほど、ある要員から別の要員への情報引き渡しに時間がかかるようになってしまう。
  「流れ作業」というアプローチは、機械的作業に対してならうまく機能するが、知識的作業に対しては全く機能しない。
  要員間のコミュニケーションが作業時間のある程度を占めている場合、要員の追加はプロジェクトが遅延する原因の１つにもなりうる。

４章ソフトウェア工学よりも優れたメタファを探る
  ソフトウェア職人気質には伝統的な鍛冶屋の職人気質との類似点が数多くある。

５章ソフトウェア開発に人を呼び戻す
  人というものが最も高価なリソースであることが、ソフトウェア開発の新たな現実となった。
  人は作業の一部分だけであれば比較的短時間に学習できるが、完全な熟達はすぐには達成できない。
  類似した考えとして、技芸を実践している人が、実践を止めてしまった場合、その瞬間から技芸は色褪せ始める。
  「プログラミングとは技芸です」

６章資格制度の対極に位置する職人気質
  職人は製品を生み出す手段によって評価されるのではなく、顧客が手にする製品の品質によって評価される。
  開発者が認定試験に合格しているという事実は、有益なアプリケーションを開発する上で必要となる開発者の能力についてはなにも述べておらず、
  その開発者が試験に合格する方法を学んでいたという点を述べているに過ぎない。
  ソフトウェア開発要員は不足してはいない。特定のスキルを持った優れた開発者が不足しているため、アプリケーションすべてを開発するために
  多くの作業が必要になる。

７章職人気質がシステムのユーザにもたらす変化
  多くのユーザーにとっては、小さく、機能が限定されていれも、時代を超えて生き残っていく堅牢なアプリケーションの方が優れた解決策となります。
  ソフトウェア製品の名前に発売年を埋め込んだり、各リリースでファイル形式を変更するような現在のやり方は、ユーザーが本当に望む方向とは全く逆を向いている。
  もしも５０％の製品満足度を達成したいのであれば、大衆全体を５０％満足させるような方法ではダメ。これを実現するには、人々の中から５０％を選抜し、
  彼らを１００％満足させるしか方法はない。
  素晴らしいソフトウェアには署名がある。

８章
  開発者が本当に優れているのかどのように判断するのか。
  インタビューに何時間もかけたり、試験を行うよりも、その人が過去に作ったアプリケーションに目を向ける。

９章　職人の管理
  開発者は作業中に「考えることで報酬を得ている」

  技芸の基本
    真の問題を理解しているかどうか確認し、じっくりと厳しい目で簡潔な解決策を模索し、
    見つけ出した解決策は、まず小規模の例で確認する
  

考え
技術より人にフォーカスした考えの方がうまくいく。
機械的作業と知識的作業。
職人気質の本質は熟練度を向上させること。（経験を積んで感覚を養う）
>技芸を実践している人が、実践を止めてしまった場合、その瞬間から技芸は色褪せ始める
まさしくこれ。
ギターも全盛期はOverDriveやひとつだけを弾いていたのに今は１小節もまともに弾けない。

