第１部人材を活用する
  管理者の大部分は、人を交換可能な部品と扱う特有の失敗をしがち。
  >失敗したプロジェクトの圧倒的多数は、原因が単なる技術的問題として片付けられないものばかりだった。

  問題の本質
  ソフトウェア開発上の問題の多くは、
  技術敵というより社会学的な問題である。

  チーズバーガー生産販売管理哲学
    ・エラーを叩き出せ、機会をスムーズい動かせ、人間も同じ。
    ・仕事でヘマしたら懲罰だ。
    ・決められたやり方を手早くやれ。
    ・作業手順を標準化。万事マニュアルに従え。
    ・新しいことを試みるな。
    チーズバーガー生産販売管理哲学はソフトウェア開発では致命的

  仕事そのものをガリガリやる時間を減らして、
  仕事についてじっくり考える時間を増やす。

  企業で働いてる人は、いつも手を動かしていないと仕事をした気にならない、という考えにとりつかれている。

  読書の統計をとると、実に散々たるもので
  平均的なソフトウェア開発者は、ソフトウェアに関する本を、一冊も持っていないし、一度も読んだことがない。

  残業の後には、いつもその時間と同じ長さの「無業の時間」が必要となり、その間に残業で失った生気を取り戻す。

  仕事中毒
    真面目に残業し、無疆時間で埋め合わせできない人が、仕事中毒にかかる。
    十分なプレッシャーをかければ、自分の生活を犠牲にしながら働き続ける。
    しかし、これはほんのしばらくの間だけ。
    いったんこれに気付くと、プロジェクトが終わった後で、その人は永遠にいなくなる。
    人生にとってそんなに大切じゃないこと（仕事）のために
    もっと大切なもの（）を犠牲にしていると気付いた時、ひどくみじめな気持ちになる。
    ただ黙って辞めてしまう。燃え尽きてしまうのである。

  はやくやれと急かせば、雑な仕事をするだけで、質の高い仕事はしない。

  健全な作業環境の下で、作業者が職務をきちんと遂行しない理由は、
  能力の不足か、自信の無さか、あるいはプロジェクトの完成までに同僚と仲良くやれないことにある。
  いずれも、納期によるプレッシャーは大した解決策にならない。
  例えば、作業者が職務をきちんと遂行できていないとか、作ったものの品質を気にかけないように見えてる場合は、
  作業者は仕事の難しさに打ちのめされている。
  なのでこれ以上のプレッシャーは必要ない。必要なのは配置転換か転職である。

  上司が、日程的なプレッシャーを少しもかけなかったプロジェクトは最高の生産性を示している。

  絶望の淵にある人には、証拠などどうでもいい。

  >シャロンは、部屋に入ってきて私を見つけ、コンソールの前で倒れそうになった私を支えてくれた。
  そしてちょっと姿を消したかと思うとスープをもってもどり、私に飲ませて元気付けてくれた。
  私はきいた。「管理業務が山ほどあるのに、どうしてこんなことまでできるのですか？」
  シャロンは笑みを浮かべて答えた。「これが管理というものよ」

  管理者の役割は、人を働かせることにあるのではなくて、人を働く気にさせることにある。

第２部オフィス環境と生産性
  何日と仕事がはかどらない原因はゴマンとあるが、結局行き着くところは
  オフィスの環境である。

  「一番仕事がはかどるのは、まだ誰も出社していない早朝だ」
  「昼間なら２、３日かかる仕事も、夜中にやれば１日で済んでしまう」
  「夕方の６時を過ぎるころから静かになり、１つのことに没頭できる」

  オフィスに遅くまで残ったり、朝早く出社したり、静かな自宅で仕事をしなければならないのは、
  オフィス環境の悪さに対する強烈な告発である。
  みんなそのことに気付いているのに、誰も何もしない。

  生産性と無縁な要因
  ・プログラミング言語
  ・経験年数
  ・残存不良数
  ・年収

  誰も書かなかった生産性要因→誰とチームを組んでいるか

  「プログラムは夜作られる」

  
