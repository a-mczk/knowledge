プログラミングの心理学
  プログラムを読むことの重要性
  ものの書き方を学ぶための１つの方法は書いてみることだが、
  それ以外にもう１つ、どういう種類の書きものについても、読んでみるという方法がある。
  プログラムの書き方を覚えるのに、プログラムを読んでいる人がどのくらいいるだろうか。
  しかし、読み手が何が良くて何が悪いかをわかっていないと、コードを読むことはあまり役に立たない。

人月の神話
  普遍なものは進化そのもの
  完成されたシステムは、完成された時点が最も安定しており、
  その後のメンテナンスでさまざまな修正が加えられていくと、システムが修正不可能な状態へと進んでいき、
  最後には真新しい根底からの再デザインが必要になる。（まさしく今のエンジン）

ピープルウエア
  人は交換可能な部品ではない
  「管理者の責任を果たす上で、最も大切なのは人間中心に考えることなのに、これがいつmないがしろにされている」
  仕事の人間的な側面より、技術面に注意を多く払う理由は、重要だからではなく、単に解決しやすいから

  電話や騒音が生産性を下げる
  >上位グループのオフィスは、静かで、個人の空間、プライバシーが保護され、無駄な割り込みもなく、その他あらゆる点で下位グループよりも恵まれていた

  ソフトウェアは肉体労働ではなく頭脳労働であるため、割り込まれることなく連続してどれだけ集中できるかが重要

デッドライン
  優れたプロジェクトは、設計に費やす時間の割合がはるかに高い

  残業と生産性
  プレッシャーをかけても思考は速くならない。

ソフトウェア職人気質
  ソフトウェアを書くことは芸術であり、本当にうまくなるには１０年を要する

達人プログラマー
  初心者には同じコードを２箇所以上に記述することそのものが問題である、という認識がない
  プログラミングであれば、コードの一部をコピーしたその瞬間から「コピーしないで済ませる方法はないか」と考え始めることが求められる

コードコンプリート
  ソフトウェアは一種の芸術であり、初心者にとっては、何が美しく、何がそうでないのかを判断するのは容易ではない。
  「型」覚えずして上達なし
  ソフトウェアが芸術であることを考慮すれば、ソフトウェアについても、初心者が論理的に理解できなくても型を教え込む必要があることになる。
  初心者は、まずは良いスタイルを学ぶ必要があるということ。

  良いスタイルは習慣（大事なポイント）
  自分でコードをかき起こす際にスタイルに考慮し、時間をとってスタイルを見直し、改善していけば、良い習慣が身につくようになる。

  経験の浅い人は「後でリファクタリングするから」と、とにかく汚くても動けばいいと考えてコードを書いてしまう人も少なくない。しかし、それはリファクタリングで修正すべき「におい」に対する嗅覚が発達していないということになる。熟練者はその場でコードを修正する。
  

